name: CI/CD and Maintenance

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Development environment setup
      - name: Setup Go
        uses: actions/setup-go@v5.2.0
        with:
          go-version: '1.22'
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '21.x'
          cache: 'npm'
          check-latest: true

      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.10'

      # Install dependencies
      - name: Install Node.js dependencies
        run: |
          npm ci
          npm install -g @mermaid-js/mermaid-cli

      - name: Install Julia dependencies
        run: |
          julia -e 'using Pkg; Pkg.add(["NodeJS", "Franklin", "CommonMark"])'

      # Verify installations
      - name: Verify environments
        run: |
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Go version: $(go version)"
          echo "Julia version: $(julia --version)"

      # Run tests
      - name: Run tests
        run: |
          npm test
          go test ./...
          julia -e 'using Pkg; Pkg.test()'

      # Build project
      - name: Build project
        run: |
          npm run build
          julia -e 'using Franklin; serve(); optimize()'

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '__site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  maintenance:
    needs: build-and-test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Handle stale issues
      - name: Process stale issues
        uses: actions/stale@v9.0.0
        with:
          stale-issue-message: >
            This issue has been automatically marked as stale due to inactivity.
            It will be closed if no further activity occurs within 7 days.
          days-before-stale: 30
          days-before-close: 7
          exempt-issue-labels: 'bug,security,documentation'
          stale-issue-label: 'stale'

      # Scan for common issues
      - name: Scan for issues
        uses: actions/github-script@v7
        with:
          script: |
            async function checkIssues() {
              // Check for security issues
              const files = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '.'
              });
              
              for (const file of files.data) {
                if (file.name === 'package.json') {
                  const content = Buffer.from((await github.rest.repos.getContent({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: file.path
                  })).data.content, 'base64').toString();
                  
                  const pkg = JSON.parse(content);
                  if (pkg.dependencies) {
                    for (const [dep, version] of Object.entries(pkg.dependencies)) {
                      if (version.startsWith('^')) {
                        await github.rest.issues.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: `Security: Review dependency ${dep}`,
                          body: `Package ${dep} uses caret version (${version}). Consider pinning to specific version.`,
                          labels: ['security', 'dependencies']
                        });
                      }
                    }
                  }
                }
              }
            }
            
            await checkIssues();

  notify:
    needs: [build-and-test, deploy, maintenance]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ needs.build-and-test.result }}';
            if (conclusion !== 'success') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Workflow Failed',
                body: 'The CI/CD workflow has failed. Please check the logs.',
                labels: ['ci-cd', 'failed']
              });
            }
